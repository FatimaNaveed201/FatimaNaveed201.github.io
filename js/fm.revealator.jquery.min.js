// Revealator pluggin which adds visual effects to the website
// The purpose of this code is to create a plugin called "Revealator" that adds visual effects to elements on a web page based on their visibility.

// Declare and initialize the Revealator object
var Revealator = void 0 !== Revealator ? Revealator : {};

// Wait for the DOM to be ready
$(function() {

  // Define a function to handle the scroll event and trigger the refresh of the Revealator effects
  function a() {
    // Check if Revealator is not busy
    if (!Revealator.busy) {
      Revealator.busy = true;
      setTimeout(function() {
        // Set Revealator to not busy after a timeout
        Revealator.busy = false;
        // Call the refresh method of Revealator
        Revealator.refresh();
      }, 150);
    }
  }

  // Extend the Revealator object with default properties and methods, if Revealator is not already defined
  Revealator = $.extend({}, {
    timer: null,
    busy: false,
    scroll_padding: 0,
    effects_padding: 0,
    refresh: function() {}
  }, void 0 !== Revealator ? Revealator : {});

  // Define the refresh method of Revealator
  Revealator.refresh = function() {
    // Get jQuery objects for window, document, and body
    var a = $(window),
      e = $(document),
      o = $(document.body);
    
    // Calculate various values based on the window, document, and Revealator properties
    var t = Revealator.effects_padding,
      l = a.height() - Revealator.effects_padding,
      r = Revealator.scroll_padding,
      s = e.height() - Revealator.scroll_padding;

    // Check if the window is at the top
    if (a.scrollTop() === 0) {
      // Add or remove appropriate CSS classes to the body element
      o.hasClass("at-top") || o.addClass("at-top").removeClass("at-bottom").removeClass("near-top").removeClass("near-bottom");
    }
    // Check if the window is at the bottom
    else if (a.scrollTop() + a.height() === e.height()) {
      // Add or remove appropriate CSS classes to the body element
      o.hasClass("at-bottom") || o.addClass("at-bottom").removeClass("at-top").removeClass("near-top").removeClass("near-bottom");
    }
    // Check if the window is near the top
    else if (a.scrollTop() <= r) {
      // Add or remove appropriate CSS classes to the body element
      o.hasClass("near-top") || o.addClass("near-top").removeClass("near-bottom").removeClass("at-top").removeClass("at-bottom");
    }
    // Check if the window is near the bottom
    else if (a.scrollTop() + a.height() >= s) {
      // Add or remove appropriate CSS classes to the body element
      o.hasClass("near-bottom") || o.addClass("near-bottom").removeClass("near-top").removeClass("at-top").removeClass("at-bottom");
    }
    // If none of the above conditions are met
    else {
      // Remove all related CSS classes from the body element
      (o.hasClass("at-top") || o.hasClass("at-bottom") || o.hasClass("near-top") || o.hasClass("near-bottom")) && o.removeClass("at-top").removeClass("at-bottom").removeClass("near-top").removeClass("near-bottom");
    }

    // Iterate over elements with class names containing "revealator"
    $('*[class*="revealator"]').each(function() {
      // Get the jQuery object for the current element
      var a = $(this);
      
      // Get the bounding rectangle of the current element
      var e = this.getBoundingClientRect(),
        o = void 0;
      
      // Calculate the visibility state based on the element's position in the viewport
      if (e.top > l && e.bottom > l) {
        o = "revealator-below";
      } else if (e.top < l && e.bottom > l) {
        o = "revealator-partially-below";
      } else if (e.top < t && e.bottom > t) {
        o = "revealator-partially-above";
      } else if (e.top < t && e.bottom < t) {
        o = "revealator-above";
      } else {
        o = "revealator-within";
      }
      
      // Check if the element has the "revealator-load" class and is not within the viewport
      if (a.hasClass("revealator-load") && !a.hasClass("revealator-within")) {
        // Add or remove appropriate CSS classes to the element
        a.removeClass("revealator-below revealator-partially-below revealator-within revealator-partially-above revealator-above");
        a.addClass("revealator-within");
      }
      // Check if the element has the "revealator-once" class
      else if (a.hasClass("revealator-once")) {
        // Check if the element is already within the viewport or partially above the viewport
        if (!a.hasClass("revealator-within")) {
          // Add or remove appropriate CSS classes to the element
          a.removeClass("revealator-below revealator-partially-below revealator-within revealator-partially-above revealator-above");
          a.addClass(o);
        }
        // Check if the element is partially above or above the viewport
        if (a.hasClass("revealator-partially-above") || a.hasClass("revealator-above")) {
          // Add the "revealator-within" class to make the element visible
          a.addClass("revealator-within");
        }
      }
      // If the element does not have the "revealator-load" or "revealator-once" class
      else {
        // Add or remove appropriate CSS classes to the element
        a.removeClass("revealator-below revealator-partially-below revealator-within revealator-partially-above revealator-above");
        a.addClass(o);
      }
    });
  };

  // Attach the scroll, resize, and load events to the window
  $(window).on("scroll resize load", function() {
    // Call the function to handle the events
    a();
  });

  // Call the function once after the document is ready
  $(document).ready(function() {
    // Initialize the Revealator effects
    a();
  });
});
